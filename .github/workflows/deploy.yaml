name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - qa
      - main

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Default permission for accessing the repo

jobs:
  
  Set-up-permissions-for-the-workflow:
    name: Set permissions
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set auth
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          # Value is found on the GCP WIF Provider details > Default audience #
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          # Value is the email address of the GCP service account #
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name:
        #### Use the github environment secrets DEV/GCP_PROJECT_ID ####
        run: |
          gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
            --member="serviceAccount:${{ secrets.SERVICE_ACCOUNT }}" \
            --role="roles/serviceusage.serviceUsageAdmin"
  
      - name:
        #### Use the github environment secrets DEV/GCP_PROJECT_ID ####
        run: |
          gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
            --member="serviceAccount:${{ secrets.SERVICE_ACCOUNT }}" \
            --role="roles/bigquery.admin"
      
      - name:
        #### Use the github environment secrets DEV/GCP_PROJECT_ID ####
        run: |
          gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
            --member="serviceAccount:${{ secrets.SERVICE_ACCOUNT }}" \
            --role="roles/dataflow.developer"
      
      - name:
        #### Use the github environment secrets DEV/GCP_PROJECT_ID ####
        run: |
          gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
            --member="serviceAccount:${{ secrets.SERVICE_ACCOUNT }}" \
            --role="roles/dataplex.admin"

      - name:
        run: |  
          gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
            --member="serviceAccount:service-571690378641@gcp-sa-bigquerydatatransfer.iam.gserviceaccount.com" \
            --role=roles/bigquery.admin

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: Set-up-permissions-for-the-workflow
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set auth
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          # Value is found on the GCP WIF Provider details > Default audience #
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          # Value is the email address of the GCP service account #
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
  
      - name: Check if GCS bucket exists
        id: check-bucket
        run: |
          # Value TF_VAR_BUCKET must be defined in Github environement secrets #
          if gsutil ls -b gs://${{ secrets.TF_VAR_BUCKET }}; then
              echo "Bucket already exists."
              echo "bucket_exists=true" >> $GITHUB_ENV
            else
              echo "Bucket does not exist."
              echo "bucket_exists=false" >> $GITHUB_ENV
            fi
  
      - name: Create GCS bucket
        if: env.bucket_exists == 'false'
        run: |
          # Value TF_VAR_BUCKET must be defined in Github environement secrets #
          gsutil mb -l europe-west6 gs://${{ secrets.TF_VAR_BUCKET }}

      - name: Create backend folder
        run: |
            echo "Creating backend folder in the bucket"
            # Value TF_VAR_BUCKET must be defined in Github environement secrets #
            gsutil cp /dev/null gs://${{ secrets.TF_VAR_BUCKET }}/backend/

  deploy-fabric:
    name: Deploy Fabric
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Set auth
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          # Value is found on the GCP WIF Provider details > Default audience #
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          # Value is the email address of the GCP service account #
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install -y terraform
  
      - name: Initialize Terraform
        run: |
          cd infra
          terraform init \
            -backend-config="bucket=${{ secrets.TF_VAR_BUCKET }}" \
            -backend-config="prefix=backend/terraform/state"
      
      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install -y terraform
  
      - name: Set GitHub Run ID
        run: echo "github_run_id=${{ github.run_id }}" >> $GITHUB_ENV
  
      - name: Initialize Terraform
        run: |
          cd infra
          terraform init \
            -backend-config="bucket=${{ secrets.TF_VAR_BUCKET }}" \
            -backend-config="prefix=backend/terraform/state"

      - name: Apply Terraform
        run: |
          cd infra
          terraform apply -var-file="${{ github.ref_name }}.tfvars" -var="github_run_id=${{ github.run_id }}" -auto-approve
  
  data_transfer:
    name: Data Transfer
    runs-on: ubuntu-latest
    needs: deploy-fabric
    environment: ${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set auth
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Transfer ac_schools Data
        run: |
          bq load --source_format=CSV --skip_leading_rows=1 \
            ${{ secrets.GCP_PROJECT_ID }}:${{ secrets.BQ_DATASET_ACADEMIA }}.ac_schools \
            gs://inputs-acd-data/inputs/ac_schools.csv

      - name: Transfer ac_students_list Data
        run: |
          bq load --source_format=CSV --skip_leading_rows=1 \
            ${{ secrets.GCP_PROJECT_ID }}:${{ secrets.BQ_DATASET_ACADEMIA }}.ac_students_list \
            gs://inputs-acd-data/inputs/ac_students_list.csv

      - name: Transfer fin_students_fees Data
        run: |
          bq load --source_format=CSV --skip_leading_rows=1 \
            ${{ secrets.GCP_PROJECT_ID }}:${{ secrets.BQ_DATASET_FINANCE }}.fin_students_fees \
            gs://inputs-fin-data/inputs/fin_students_fees.csv

      - name: Transfer hr_countries Data
        run: |
          bq load --source_format=CSV --skip_leading_rows=1 \
            ${{ secrets.GCP_PROJECT_ID }}:${{ secrets.BQ_DATASET_HR }}.hr_countries \
            gs://inputs-hr-data/inputs/hr_countries.csv

      - name: Transfer hr_employees_list Data
        run: |
          bq load --source_format=CSV --skip_leading_rows=1 \
            ${{ secrets.GCP_PROJECT_ID }}:${{ secrets.BQ_DATASET_HR }}.hr_employees_list \
            gs://inputs-hr-data/inputs/hr_employees_list.csv

      - name: Transfer hr_salaries Data
        run: |
          bq load --source_format=CSV --skip_leading_rows=1 \
            ${{ secrets.GCP_PROJECT_ID }}:${{ secrets.BQ_DATASET_HR }}.hr_salaries \
            gs://inputs-hr-data/inputs/hr_salaries.csv

      - name: Transfer opr_swissgrid_data Data
        run: |
          bq load --source_format=CSV --skip_leading_rows=1 \
            ${{ secrets.GCP_PROJECT_ID }}:${{ secrets.BQ_DATASET_OPERATIONS }}.opr_swissgrid_data \
            gs://inputs-opr-data/inputs/opr_swissgrid.csv

      - name: Transfer pub_epfl_students_data Data
        run: |
          bq load --source_format=CSV --skip_leading_rows=1 \
            ${{ secrets.GCP_PROJECT_ID }}:${{ secrets.BQ_DATASET_PUBLIC }}.pub_epfl_students_data \
            gs://inputs-pub-data/inputs/pub_epfl_student_data.csv

      - name: Transfer shr_epfl_employee_students_data Data
        run: |
          bq load --source_format=CSV --skip_leading_rows=1 \
            ${{ secrets.GCP_PROJECT_ID }}:${{ secrets.BQ_DATASET_SHARED }}.shr_epfl_employee_students_data \
            gs://inputs-shr-data/inputs/shr_epfl_employee_student_data.csv
##### The End #####